package com.isp.seeds.dao.impl;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.List;

import com.isp.seeds.Exceptions.DataException;
import com.isp.seeds.dao.utils.ContenidoDAO;
import com.isp.seeds.dao.utils.JDBCUtils;
import com.isp.seeds.model.Contenido;

public class ContenidoDAOImpl implements ContenidoDAO {
	
	
	
	

	@Override
	public Contenido findById(Long id) throws Exception {
		// TODO Auto-generated method stub
		return null;
	}



	@Override
	public List<Contenido> findAll(Connection connection) throws Exception {
		// TODO Auto-generated method stub
		return null;
	}



	@Override
	public List<Contenido> findByCriteria(Connection connection, Contenido criteria) throws Exception {
		// TODO Auto-generated method stub
		return null;
	}



	@Override
	public Contenido create (Connection connection, Contenido c) throws Exception {
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		
		try {

			// Creamos el preparedstatement
			
			String queryString = "INSERT INTO contenido (nombre, fecha_alta, fecha_mod, autor_id_contenido) "
					+ "VALUES (?, ?, ?, ?)";

			preparedStatement = connection.prepareStatement(queryString,
									Statement.RETURN_GENERATED_KEYS);

			// Rellenamos el "preparedStatement"
			int i = 1;
			preparedStatement.setString(i++, c.getNombre());
			preparedStatement.setDate(i++, new java.sql.Date(c.getFechaAlta().getTime()));
			preparedStatement.setDate(i++, new java.sql.Date(c.getFechaMod().getTime()));
			
			if(c.getIdAutor() == null) { // INSERTAR USUARIOS: AUTOR=NULL
				preparedStatement.setObject(i++, null);
			}
			else {  // INSERTAR VIDEOS Y LISTAS
				preparedStatement.setLong(i++, c.getIdAutor());
			}
			
			// Execute query
			int insertedRows = preparedStatement.executeUpdate();

			if (insertedRows == 0) {
				throw new SQLException("Can not add row to table 'Usuario'");
			}

			// Recuperamos la PK generada
			
			resultSet = preparedStatement.getGeneratedKeys();
			if (resultSet.next()) {
				Long pk = resultSet.getLong(1); 
				c.setIdContenido(pk);
			} else {
				throw new DataException("Unable to fetch autogenerated primary key");
			}

			// Return the DTO
			return c;

		} catch (SQLException e) {
			throw new DataException(e);
		} finally {
			JDBCUtils.closeResultSet(resultSet);
			JDBCUtils.closeStatement(preparedStatement);
		}
	}



	@Override
	public long delete(Connection connection, Long id) throws Exception {

		PreparedStatement preparedStatement = null;

		try {
			String queryString =	
					  "DELETE FROM CONTENIDO " 
					+ "WHERE id_contenido = ? ";
			
			preparedStatement = connection.prepareStatement(queryString);

			int i = 1;
			preparedStatement.setLong(i++, id);

			int removedRows = preparedStatement.executeUpdate();

			if (removedRows == 0) {
				throw new Exception("Exception");
			} 
			
			return removedRows;

		} catch (SQLException e) {
			throw new DataException(e);
		} finally {
			JDBCUtils.closeStatement(preparedStatement);
		}
	}
}